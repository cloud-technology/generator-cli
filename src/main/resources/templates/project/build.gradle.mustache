plugins {
  id 'java'
  id 'org.springframework.boot' version '3.2.3'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'jacoco'
  id 'com.gorylenko.gradle-git-properties' version '2.4.1'
  id 'org.openapi.generator' version '7.2.0'
}

group = '{{groupId}}'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

java {
  sourceCompatibility = '17'
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

ext {
  set('springCloudGcpVersion', "5.0.4")
  set('springCloudVersion', "2023.0.0")
  set('springModulithVersion', "1.1.2")
  set('mapstructVersion', "1.5.5.Final") // https://central.sonatype.com/artifact/org.mapstruct/mapstruct
  set('logbookVersion', "3.4.0") // https://central.sonatype.com/artifact/org.zalando/logbook-spring-boot-starter
	set('lombokMapstructBindingVersion', "0.2.0") // https://central.sonatype.com/artifact/org.projectlombok/lombok-mapstruct-binding
	set('chaosMonkeyVersion', "3.0.2") // https://search.maven.org/artifact/de.codecentric/chaos-monkey-spring-boot
  set('springdocVersion', "2.2.0") // https://central.sonatype.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
	set('jacksonDatabindNullableVersion', "0.2.6") // https://central.sonatype.com/artifact/org.openapitools/jackson-databind-nullable
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-data-redis'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'io.micrometer:micrometer-tracing-bridge-brave'
  implementation 'org.liquibase:liquibase-core'
  implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
  implementation 'org.springframework.cloud:spring-cloud-stream'
  implementation 'org.springframework.modulith:spring-modulith-starter-core'
  implementation 'org.springframework.modulith:spring-modulith-starter-jpa'
  // GCP
	implementation 'com.google.cloud:spring-cloud-gcp-starter'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-storage'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-kms'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-secretmanager' 
	implementation 'com.google.cloud:spring-cloud-gcp-pubsub-stream-binder'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-sql-postgresql'
  // 
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
  runtimeOnly 'org.postgresql:postgresql'
  runtimeOnly 'org.springframework.modulith:spring-modulith-actuator'
  runtimeOnly 'org.springframework.modulith:spring-modulith-observability'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'
  testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
  testImplementation 'org.testcontainers:gcloud'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
    mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging.showStandardStreams = true
}

jacocoTestReport {
	// tests are required to run before generating the report
	dependsOn test
	reports {
		// sonar analysis equired
		xml.required.set(true)
		csv.required.set(true)
		html.required.set(true)
	}
}

sourceSets {
    main {
        java {
			srcDir new File(buildDir, "/generated/openapi/src/main/java")
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
        '-Amapstruct.defaultComponentModel=spring',
        '-Amapstruct.suppressGeneratorTimestamp=true',
        '-Amapstruct.verbose=true'
    ]
}

gitProperties {
	failOnNoGitDirectory = false
}

// 確保在編譯 Java 代碼之前先執行 openApiGenerate 任務
tasks.named('compileJava') {
    dependsOn 'openApiGenerate' 
}

// ./gradlew clean openApiGenerate
openApiGenerate {
  generatorName = "spring"
  library = "spring-cloud"
  inputSpec = "$rootDir/dev-resources/openapi.yaml".toString()
  outputDir = "$buildDir/generated/openapi".toString()
  apiPackage = "csd.ct.ai.interfaces.api"
  modelPackage = "csd.ct.ai.interfaces.dto"
	configOptions.set([
		hateoas: "false"
	])
	configOptions = [
		interfaceOnly: "true",
		useTags: "true",
		useResponseEntity: "true",
		unhandledException: "true",
		useSpringBoot3: "true"
    ]
    logToStderr = true
}


